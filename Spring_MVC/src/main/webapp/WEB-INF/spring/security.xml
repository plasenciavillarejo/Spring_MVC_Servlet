<?xml version="1.0" encoding="UTF-8"?>

<b:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:b="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/security
		http://www.springframework.org/schema/security/spring-security.xsd">

	<!-- 1.- El tag 'http/' sirve para proteger todas las URLS de la aplicación, al realizar cualquier petición ya sea @Get o @Post se va a solicitiar el usuario y contraseña
		para poder visualizar la información (En caso de que no se esté logueado para ello) -->
	<http auto-config="true">
	<!-- Declaramos todos los recursos que estaran protegidos -->
		<intercept-url pattern="/peliculas/*" access="hasAnyAuthority('EDITOR')" />
		<intercept-url pattern="/horario/*" access="hasAnyAuthority('EDITOR')" />
		<intercept-url pattern="/noticias/*" access="hasAnyAuthority('EDITOR')" />
		<intercept-url pattern="/contacto/*" access="hasAnyAuthority('EDITOR','GERENTE')" />
		<intercept-url pattern="/" access="hasAnyAuthority('EDITOR','GERENTE')" />
		<intercept-url pattern="/banners/*" access="hasAnyAuthority('GERENTE')" />
		<intercept-url pattern="/home" access="hasAnyAuthority('EDITOR','GERENTE')" />
		<intercept-url pattern="/imprimir/*" access="hasAnyAuthority('EDITOR','GERENTE')" />
<!-- 	<intercept-url pattern="/usuarios/*" access="hasAnyAuthority('EDITOR','GERENTE')" /> -->
		
		<intercept-url pattern="/resources/**" access="permitAll"/>
		
		<!-- 2.- Indicamos nuestra página de inicio de login personalizada. 
			2.1.- login-page: Se le indica el método del controlador "HomesController.java" encargado de rederigir la página de login. 
					Se accede a el mediante: 
						a) "/login" (public String mostrarLogin() {} )
						
			2.2.- Por defecto si no especificamos ninguna URL de destino despues de loguearnos, será REDIRECCINADO automaticamente al directorio raíz de nuestra aplicación,
					si se desea configurar para que se redirecciona a otro sitio deberemos de añadir: "LoginController.java"
						a) default-target-url:"URL destino"; de está forma evitamos que rediriga al directorio raíz.
				
				Nota: Todo es a nivel de controlador tanto el login-page como el default-target-url
					
		-->
		
		<form-login login-page="/login" 
			default-target-url="/admin/index" />
		
		<!-- 2.3.- Se le indica el máximo de sesiones permitidas por un usuario 
			 2.4.- Para llevar un control de sesión cuando se accede con varios usuarios a la vez este último puede ser
			 rederigidio a una página donde se indica que no se puede acceder con múltiples usuairos. -->	
		<session-management>
			<concurrency-control max-sessions="1" expired-url="/admin/sesionMaxima"/>
		</session-management>
	
		<!-- 2.4.- Proteccion en las cabeceras sin necesidad de incluir filtros -->
		<!-- <headers>  -->
			
			<!-- Cache-Control: no-cache, no-store, max-age=0, must-revalidate Pragma: no-cache Expires: 0 -->
			<!--  <cache-control disabled="true" /> -->
			
			<!-- X-Content-Type-Options: nosniff -->
        	<!-- <content-type-options disabled="true" /> -->
			
			<!-- Strict-Transport-Security: max-age=31536000 ; includeSubDomains ; preload -->
			<!-- <hsts include-subdomains="true" max-age-seconds="31536000" preload="true" /> -->
			
			<!-- XFrame-Options: SAMEORIGIN -->
			<!-- <frame-options policy="SAMEORIGIN"/> -->
			
			<!-- X-XSS-Protection: 1; mode=block -->
			<!-- <xss-protection block="false"/> -->
			
			<!-- script-src 'self' https://trustedscripts.example.com; object-src https://trustedplugins.example.com; report-uri /csp-report-endpoint/ -->
			<!-- <content-security-policy policy-directives="script-src 'self' https://trustedscripts.example.com; 
				object-src https://trustedplugins.example.com; report-uri /csp-report-endpoint/" /> -->
			
		<!-- </headers> -->
		
	</http>
	
	<!-- 
	3.- DECLARACÓN DE USUARIOS EN MEMORIA.
		El autenticahtion-manager es una forma de indicarle a spring-security de donde va a recuperar los usuarios y contraseñas que van a tener acceso a la aplicación.
		En este momento se le está declarando dos usuario en la memoría. 
		
		Nota: {noop} se indica antes del password real para indicar que está en texto plano (no encriptado)  
	
	<authentication-manager>
		<authentication-provider>
			<user-service>
				<user name="jose" password="{noop}jose123" authorities="EDITOR" />
				<user name="lola" password="{noop}lola123" authorities="GERENTE" />
			</user-service>
		</authentication-provider>
	</authentication-manager>
	
	
	4.- AUTENTICACION DE LOS USUARIOS DESDE UNA BBDD - POR DEFECTO (Users, Authorities).
		Configuramos el authentication-manager para recuperar los usuario desde BBDD y no hacerlo desde memoría como estabamos haciendo anteriormente (Paso 3.) 
		 Solo con está configuración nos bastará para poder hacer login contra los usuarios que hay en BBDD
	  
	<authentication-manager>
		<authentication-provider>
	
		  La variable "dataSource" es la que está indicada en el fichero root-context.xml: (bean del datasource) 
				a) <bean id="dataSource" ../>
			Si creamos un esquema especial con diferentes campos podemos recupearlos indicando la siguientes querys.	 

			<jdbc-user-service data-source-ref="dataSource"/>
		</authentication-provider>
	</authentication-manager>
	-->
	
	<!-- 5.- AUTENTICACION DE LOS USUARIOS DESDE UNA BBDD - DE FORMA PERSONALIZADA. (Usuarios, Perfiles)-->
	<authentication-manager>
		<authentication-provider>
			<!-- La variable "dataSource" es la que está indicada en el fichero root-context.xml: 
				(bean del datasource) a) <bean id="dataSource" ../> Si creamos un esquema 
				especial con diferentes campos podemos recupearlos indicando la siguientes 
				querys. -->
			<jdbc-user-service data-source-ref="dataSource" 
				users-by-username-query="select cuenta,pwd,activo from Usuarios where cuenta = ? "
				authorities-by-username-query="select cuenta,perfil from Perfiles where cuenta = ? " />
			
			<!-- Se llama al password-encoder creado más abajo en el bean -->
			<password-encoder ref="passwordEncoder"/>
		</authentication-provider>
	</authentication-manager>
	
	<!-- 6.- Se añade BCrypPasswordEncode para encriptar las contraseñas -->
	<b:bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />
	
	
</b:beans>